{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SeaTable scripts manual \u00b6 SeaTable support you to write scripts to meet individual needs. Currently supported scripting language include Javascript and Python. The Javascript script runs directly in the current browser and is suitable for simple data processing. The Python script runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios. Quick start \u00b6 In SeaTable, a base includes multiple sub-table, and a sub-table contains multiple rows and columns. A row contains multiple fields. Javascript \u00b6 There are two pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks. Let's look at a simple example, outputing the number of tables in a base. To start with, add a new script, input the following content, then click the run script button. const tables = base . getTables (); output . text ( tables . length ); Let's look at another example, outputing the Name field of every rows in a table: // get table by name const table = base . getTableByName ( 'First table' ); // get view by name const view = base . getViewByName ( table , 'Default View' ); // get rows via table and view const rows = base . getRows ( table , view ); // iterate and print for ( var i = 0 ; i < rows . length ; i ++ ) { const row = rows [ i ]; output . text ( row [ 'Name' ]); } From the two examples, we can see that via calling the corresponding methods of base object, we can read and write data in a base easily. Python \u00b6 When writing the script, you need to import Base objects from seatable_api and init it, and then you can call functions to operate the table. The following is a simple example, to add a row to a table: from seatable_api import Base server_url = os . environ . get ( 'dtable_web_url' ) api_token = os . environ . get ( 'api_token' ) base = Base ( api_token , server_url ) base . auth () row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data ) Reference \u00b6 Data structure Javascript Python","title":"Home"},{"location":"#seatable-scripts-manual","text":"SeaTable support you to write scripts to meet individual needs. Currently supported scripting language include Javascript and Python. The Javascript script runs directly in the current browser and is suitable for simple data processing. The Python script runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios.","title":"SeaTable scripts manual"},{"location":"#quick-start","text":"In SeaTable, a base includes multiple sub-table, and a sub-table contains multiple rows and columns. A row contains multiple fields.","title":"Quick start"},{"location":"#javascript","text":"There are two pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks. Let's look at a simple example, outputing the number of tables in a base. To start with, add a new script, input the following content, then click the run script button. const tables = base . getTables (); output . text ( tables . length ); Let's look at another example, outputing the Name field of every rows in a table: // get table by name const table = base . getTableByName ( 'First table' ); // get view by name const view = base . getViewByName ( table , 'Default View' ); // get rows via table and view const rows = base . getRows ( table , view ); // iterate and print for ( var i = 0 ; i < rows . length ; i ++ ) { const row = rows [ i ]; output . text ( row [ 'Name' ]); } From the two examples, we can see that via calling the corresponding methods of base object, we can read and write data in a base easily.","title":"Javascript"},{"location":"#python","text":"When writing the script, you need to import Base objects from seatable_api and init it, and then you can call functions to operate the table. The following is a simple example, to add a row to a table: from seatable_api import Base server_url = os . environ . get ( 'dtable_web_url' ) api_token = os . environ . get ( 'api_token' ) base = Base ( api_token , server_url ) base . auth () row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data )","title":"Python"},{"location":"#reference","text":"Data structure Javascript Python","title":"Reference"},{"location":"data-structure/","text":"Row, Column, Table \u00b6 Row \u00b6 Row is an object, use row['colum_name'] to get the value of a specific cell. There are a few special columns: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row Different column types have different type of values: simple-text : string number : number single-select : option name, string date : string, in format 2020-01-01 or 2020-01-01 10:00 check : boolean long-text : Markdown string image : array, each element of the array is the URL of image multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's ID link : array, each element of the array is a link name file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}] Column \u00b6 A column object has following fields: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the column, string Table \u00b6 A table object has following fields: _id : The id of the table name : The name of the table, string View \u00b6 A view object has following fields: name : The name of the view, string","title":"Data structure"},{"location":"data-structure/#row-column-table","text":"","title":"Row, Column, Table"},{"location":"data-structure/#row","text":"Row is an object, use row['colum_name'] to get the value of a specific cell. There are a few special columns: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row Different column types have different type of values: simple-text : string number : number single-select : option name, string date : string, in format 2020-01-01 or 2020-01-01 10:00 check : boolean long-text : Markdown string image : array, each element of the array is the URL of image multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's ID link : array, each element of the array is a link name file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}]","title":"Row"},{"location":"data-structure/#column","text":"A column object has following fields: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the column, string","title":"Column"},{"location":"data-structure/#table","text":"A table object has following fields: _id : The id of the table name : The name of the table, string","title":"Table"},{"location":"data-structure/#view","text":"A view object has following fields: name : The name of the view, string","title":"View"},{"location":"javascript/","text":"SeaTable Javascript script program \u00b6 The Javascript script runs directly in the current browser and is suitable for simple data processing. There are two pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks. Reference \u00b6 Data structure of SeaTable general object: Data structure Methods of the object: base output utilities Examples \u00b6 You can find some easy to understand examples through this link https://github.com/seatable/seatable-scripts/tree/master/examples/javascript Details get-incremental.js : Calculate incremental data from a cumulative column auto-add-rows.js : Automatically record monthly repetitive items in a ledger","title":"SeaTable Javascript script program"},{"location":"javascript/#seatable-javascript-script-program","text":"The Javascript script runs directly in the current browser and is suitable for simple data processing. There are two pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks.","title":"SeaTable Javascript script program"},{"location":"javascript/#reference","text":"Data structure of SeaTable general object: Data structure Methods of the object: base output utilities","title":"Reference"},{"location":"javascript/#examples","text":"You can find some easy to understand examples through this link https://github.com/seatable/seatable-scripts/tree/master/examples/javascript Details get-incremental.js : Calculate incremental data from a cumulative column auto-add-rows.js : Automatically record monthly repetitive items in a ledger","title":"Examples"},{"location":"javascript/base/","text":"Base object \u00b6 Base object provide a way to manipulate data in a base. Table \u00b6 getActiveTable \u00b6 Get the currently selected table and return a table object Example const table = base . getActiveTable (); output . markdown ( `#### ${ table . name } ` ); getTables \u00b6 Get all tables Example const tables = base . getTables (); output . text ( tables . length ); getTableByName \u00b6 Get a table object via its name const table = base . getTableByName ( tableName : String ); Example const table = base . getTableByName ( 'Table1' ); output . text ( table . _id ); addTable \u00b6 Add a table base . addTable ( tableName : String ); Example base . addTable ( 'New table' ); renameTable \u00b6 Rename a table base . renameTable ( oldName : String , newName : String ); Example base . renameTable ( 'Old name' , 'New name' ); deleteTable \u00b6 Delete a table base . deleteTable ( tableName : String ); Example base . deleteTable ( 'Old table' ); View \u00b6 getActiveView \u00b6 Get the current view, the method return a view object Example const view = base . getActiveView (); output . text ( view . _id ); getViews \u00b6 Get all the views of the current table, and return all the views in an array const views = base . getViews ( table : Object / String ); Example const table = base . getTableByName ( 'Table1' ); const views = base . getViews ( table ); output . text ( views . length ); const views = base . getViews ( 'Table1' ); output . text ( views . length ); getViewByName \u00b6 Get a view object via its name, and return a view object const view = base . getViewByName ( table : Object / String , viewName : String ); Example const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view 1' ); output . text ( view . name ); const view = base . getViewByName ( 'Table1' , 'view 1' ); output . text ( view . name ); addView \u00b6 Add a view to a table base . addView ( table : Object / String , viewName : String ); Example const table = base . getTableByName ( 'Table1' ); base . addView ( table , 'view 2' ); base . addView ( 'Table1' , 'view 2' ); renameView \u00b6 Rename a view in the table base . renameView ( table : Object / String , currentViewName : String , nextViewName : String ); Example const table = base . getTableByName ( 'Table1' ); base . renameView ( table , 'view1' , 'view2' ); base . renameView ( 'Table1' , 'view1' , 'view2' ); deleteView \u00b6 Delete a view base . deleteView ( table : Object / String , viewName : String ); Example const table = base . getTableByName ( 'Table1' ); base . deleteView ( table , 'view2' ); base . deleteView ( 'Table1' , 'view2' ); Column \u00b6 getColumns \u00b6 Get all the columns in the table, and return all the column objects in an array const columns = base . getColumns ( table : Object / String ); Example const table = base . getTableByName ( 'Table1' ); const columns = base . getColumns ( table ); column . forEach (( column ) => { output . text ( column . name ); }) const columns = base . getColumns ( 'Table1' ); getShownColumns \u00b6 Get all the displayed columns in a view, excluding the hidden columns in the view, and return an array const columns = base . getShownColumns ( table : Object / String , view : Object / String ); Example const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view 1' ); const columns = base . getShownColumns ( table , view ); column . forEach (( column ) => { output . text ( column . name ); }) const columns = base . getShownColumns ( 'Table1' , 'view 1' ); getColumnByName \u00b6 Get the column object via its name const column = base . getColumnByName ( table : Object / String , name : String ); Example const column = base . getColumnByName ( table , 'Column name' ); output . text ( column . name ); const column = base . getColumnByName ( 'Table1' , 'Column name' ); getColumnsByType \u00b6 Get all specific types of columns in the table const columns = base . getColumnsByType ( table : Object / String , type : String ); Example const table = base . getTableByName ( 'Table1' ); const columns = base . getColumnsByType ( table , 'text' ); output . text ( column . length ); const columns = base . getColumnsByType ( 'Table1' , 'text' ); output . text ( column . length ); Row \u00b6 getRows \u00b6 Get all the rows of the view and return an array const rows = base . getRows ( table : Object / String , view : Object / String ); Example const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'view1' ); const rows = base . getRows ( table , view ); const rows = base . getRows ( 'Table1' , 'view1' ); getGroupedRows \u00b6 Get rows in the grouped view base . getGroupedRows ( table : Object / String , view : Object / String ); Example const table = base . getTableByName ( 'Table1' ); const view = base . getViewByName ( table , 'GroupedView' ); const groupViewRows = base . getGroupedRows ( table , view ); const groupViewRows = base . getGroupedRows ( 'Table1' , 'GroupedView' ); getRowById Get a row via its id and return a row object const row = base . getRowById ( table : Object / String , rowId : String ); Example const table = base . getTableByName ( 'Table1' ); const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); const row = base . getRowById ( 'Table1' , \"M_lSEOYYTeuKTaHCEOL7nw\" ); deleteRowById \u00b6 Delete a row in a table by its ID. base . deleteRowById ( table : Object / String , rowId : String ); Example const table = base . getTableByName ( 'Table1' ); base . deleteRowById ( table , 'M_lSEOYYTeuKTaHCEOL7nw' ); base . deleteRowById ( 'Table1' , 'M_lSEOYYTeuKTaHCEOL7nw' ); addRow \u00b6 Add a row to a table base . addRow ( table : Object / String , rowData : Object , viewName ?: String ) Example const table = base . getTableByName ( 'Table1' ); base . addRow ( table , { 'Name' : 'Alex' , 'Age' : '18' }); base . addRow ( table , { 'Name' : 'Alex' , 'Age' : '18' }, 'Default View' ); base . addRow ( 'Table1' , { 'Name' : 'Alex' , 'Age' : '18' }); base . addRow ( 'Table1' , { 'Name' : 'Alex' , 'Age' : '18' }, 'Default View' ); modifyRow \u00b6 Modify a row in the table base . modifyRow ( table : Object / String , row : Object , updateRowData : Object ); Example const table = base . getTableByName ( 'Table1' ); const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); base . modifyRow ( table , row , { 'Name' : 'new name' , 'number' : 100 }); const row = base . getRowById ( 'Table1' , \"M_lSEOYYTeuKTaHCEOL7nw\" ); base . modifyRow ( 'Table1' , row , { 'Name' : 'new name' , 'number' : 100 });","title":"Base object"},{"location":"javascript/base/#base-object","text":"Base object provide a way to manipulate data in a base.","title":"Base object"},{"location":"javascript/base/#table","text":"","title":"Table"},{"location":"javascript/base/#getactivetable","text":"Get the currently selected table and return a table object","title":"getActiveTable"},{"location":"javascript/base/#gettables","text":"Get all tables","title":"getTables"},{"location":"javascript/base/#gettablebyname","text":"Get a table object via its name const table = base . getTableByName ( tableName : String );","title":"getTableByName"},{"location":"javascript/base/#addtable","text":"Add a table base . addTable ( tableName : String );","title":"addTable"},{"location":"javascript/base/#renametable","text":"Rename a table base . renameTable ( oldName : String , newName : String );","title":"renameTable"},{"location":"javascript/base/#deletetable","text":"Delete a table base . deleteTable ( tableName : String );","title":"deleteTable"},{"location":"javascript/base/#view","text":"","title":"View"},{"location":"javascript/base/#getactiveview","text":"Get the current view, the method return a view object","title":"getActiveView"},{"location":"javascript/base/#getviews","text":"Get all the views of the current table, and return all the views in an array const views = base . getViews ( table : Object / String );","title":"getViews"},{"location":"javascript/base/#getviewbyname","text":"Get a view object via its name, and return a view object const view = base . getViewByName ( table : Object / String , viewName : String );","title":"getViewByName"},{"location":"javascript/base/#addview","text":"Add a view to a table base . addView ( table : Object / String , viewName : String );","title":"addView"},{"location":"javascript/base/#renameview","text":"Rename a view in the table base . renameView ( table : Object / String , currentViewName : String , nextViewName : String );","title":"renameView"},{"location":"javascript/base/#deleteview","text":"Delete a view base . deleteView ( table : Object / String , viewName : String );","title":"deleteView"},{"location":"javascript/base/#column","text":"","title":"Column"},{"location":"javascript/base/#getcolumns","text":"Get all the columns in the table, and return all the column objects in an array const columns = base . getColumns ( table : Object / String );","title":"getColumns"},{"location":"javascript/base/#getshowncolumns","text":"Get all the displayed columns in a view, excluding the hidden columns in the view, and return an array const columns = base . getShownColumns ( table : Object / String , view : Object / String );","title":"getShownColumns"},{"location":"javascript/base/#getcolumnbyname","text":"Get the column object via its name const column = base . getColumnByName ( table : Object / String , name : String );","title":"getColumnByName"},{"location":"javascript/base/#getcolumnsbytype","text":"Get all specific types of columns in the table const columns = base . getColumnsByType ( table : Object / String , type : String );","title":"getColumnsByType"},{"location":"javascript/base/#row","text":"","title":"Row"},{"location":"javascript/base/#getrows","text":"Get all the rows of the view and return an array const rows = base . getRows ( table : Object / String , view : Object / String );","title":"getRows"},{"location":"javascript/base/#getgroupedrows","text":"Get rows in the grouped view base . getGroupedRows ( table : Object / String , view : Object / String );","title":"getGroupedRows"},{"location":"javascript/base/#deleterowbyid","text":"Delete a row in a table by its ID. base . deleteRowById ( table : Object / String , rowId : String );","title":"deleteRowById"},{"location":"javascript/base/#addrow","text":"Add a row to a table base . addRow ( table : Object / String , rowData : Object , viewName ?: String )","title":"addRow"},{"location":"javascript/base/#modifyrow","text":"Modify a row in the table base . modifyRow ( table : Object / String , row : Object , updateRowData : Object );","title":"modifyRow"},{"location":"javascript/output/","text":"Output object \u00b6 Output object supports output strings in text or Markdown format. Text const table = base . getActiveTable (); output . text ( table . name ); Markdown const table = base . getActiveTable () \uff1b output . markdown ( `##### ${ table . name } ` );","title":"Output"},{"location":"javascript/output/#output-object","text":"Output object supports output strings in text or Markdown format.","title":"Output object"},{"location":"javascript/utils/","text":"Utility functions \u00b6 Utility functions help you to work with data in SeaTable. formatDate \u00b6 Format date to 'YYYY-MM-DD' to be used in a date column. Example let date = new Date (); let formatDate = base . utils . formatDate ( date ); output . text ( formatDate ); // 2020-08-20 formatDateWithMinutes \u00b6 Format date to 'YYYY-MM-DD HH:mm' to be used in a date column. Example let date = new Date (); let formatDate = base . utils . formatDateWithMinutes ( date ); output . text ( formatDate ); // 2020-08-20 14:00 lookupAndCopy\uff08\uff09 \u00b6 base . lookupAndCopy ( targetTable , targetColumn , targetColumnToCompare , sourceTableName , sourceColumnName , sourceColumnToCompare = null ); Similar to the vlookup function in Excel. Find a matching row in the source table for each row of the target table, and then copy the data of the specified cell of the matching row to the specified cell of the target row. For example, we have a source table that contains the correspondence between user names and email addresses: Name Email xxx xxxx yyy yyyy The target table only has the user names Name Email xxx yyy We need to copy the Email information in the source table to the target table, then this function can be used. Example // Match the rows with the same content in the Name column of Table1 and Table2, copy the contents of the Email column of the row in Table1 to the Email column of the corresponding row in Table2 base . lookupAndCopy ( 'Table2' , 'Email' , 'Name' , 'Table1' , 'Name' ); // Match the rows with the same content in the Name column in Table1 and the Name1 column in Table2, and copy the contents of the Email column of the row in Table1 to the Email1 column of the corresponding row in Table2 base . lookupAndCopy ( 'Table2' , 'Email1' , 'Name1' , 'Table1' , 'Email' , 'Name' );","title":"Utility functions"},{"location":"javascript/utils/#utility-functions","text":"Utility functions help you to work with data in SeaTable.","title":"Utility functions"},{"location":"javascript/utils/#formatdate","text":"Format date to 'YYYY-MM-DD' to be used in a date column.","title":"formatDate"},{"location":"javascript/utils/#formatdatewithminutes","text":"Format date to 'YYYY-MM-DD HH:mm' to be used in a date column.","title":"formatDateWithMinutes"},{"location":"javascript/utils/#lookupandcopy","text":"base . lookupAndCopy ( targetTable , targetColumn , targetColumnToCompare , sourceTableName , sourceColumnName , sourceColumnToCompare = null ); Similar to the vlookup function in Excel. Find a matching row in the source table for each row of the target table, and then copy the data of the specified cell of the matching row to the specified cell of the target row. For example, we have a source table that contains the correspondence between user names and email addresses: Name Email xxx xxxx yyy yyyy The target table only has the user names Name Email xxx yyy We need to copy the Email information in the source table to the target table, then this function can be used.","title":"lookupAndCopy\uff08\uff09"},{"location":"python/","text":"SeaTable Python script program \u00b6 The Python script runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios. Python scripts can be run on your local machine or uploaded to the SeaTable cloud to run. Local operation is convenient for development and debugging, and scripts can be easily integrated into larger projects. How to make the script support both local and cloud run \u00b6 When the script runs in the cloud, it will provide a context object, which contains the server URL auto generated by the system and the API token of base. If you run the script in local, you need to manually specify these two variables; the API token can be generated in the drop-down menu \"Advanced -> API Token\" of the table. Use the following method to make the script support both local and cloud run from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' apt_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth () Dependencies that need to be installed to run the script local \u00b6 The script need to install seatable-api when run in local. pip3 install seatable-api Requirements Python >= 3.5 requests socketIO-client-nexus Reference \u00b6 Data structure of object in SeaTable: Data structure SeaTable API introduction: Base Rows Links Columns Files Account Context Constants : Some constant definitions Libs : List of Python libraries supported for import in the cloud Example \u00b6 You can find some easy to understand examples through this link https://github.com/seatable/seatable-scripts/tree/master/examples/python Detail as follow send_email.py : Read pictures/files in one table as attachments and send email to contacts in another table","title":"SeaTable Python script program"},{"location":"python/#seatable-python-script-program","text":"The Python script runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios. Python scripts can be run on your local machine or uploaded to the SeaTable cloud to run. Local operation is convenient for development and debugging, and scripts can be easily integrated into larger projects.","title":"SeaTable Python script program"},{"location":"python/#how-to-make-the-script-support-both-local-and-cloud-run","text":"When the script runs in the cloud, it will provide a context object, which contains the server URL auto generated by the system and the API token of base. If you run the script in local, you need to manually specify these two variables; the API token can be generated in the drop-down menu \"Advanced -> API Token\" of the table. Use the following method to make the script support both local and cloud run from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' apt_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth ()","title":"How to make the script support both local and cloud run"},{"location":"python/#dependencies-that-need-to-be-installed-to-run-the-script-local","text":"The script need to install seatable-api when run in local. pip3 install seatable-api Requirements Python >= 3.5 requests socketIO-client-nexus","title":"Dependencies that need to be installed to run the script local"},{"location":"python/#reference","text":"Data structure of object in SeaTable: Data structure SeaTable API introduction: Base Rows Links Columns Files Account Context Constants : Some constant definitions Libs : List of Python libraries supported for import in the cloud","title":"Reference"},{"location":"python/#example","text":"You can find some easy to understand examples through this link https://github.com/seatable/seatable-scripts/tree/master/examples/python Detail as follow send_email.py : Read pictures/files in one table as attachments and send email to contacts in another table","title":"Example"},{"location":"python/account/","text":"Account \u00b6 Account provides an interface to list all Workspaces, add/copy/delete Bases, and obtain access rights to a Base. Authorized login \u00b6 Use email/password to log in, if you want to call other APIs provided by Account, you need to log in first Example from seatable_api import Account email = 'xiongxxx@xxx.com' password = 'xxxxxxx' server_url = 'https://cloud.seatable.cn/' account = Account ( email , password , server_url ) account . auth () Workspace \u00b6 A Workspace is a collection of user's Bases or a collection of group's Bases list workspaces \u00b6 Get all your workspaces and its Bases account . list_workspaces () Example account . list_workspaces () # Sample return # { # \"workspace_list\": [{ # \"id\": 13740, // workspace id # \"repo_id\": \"cd9a97a6-9214-4eeb-b609-4295530b9018\", # \"table_list\": [{ // base object # \"id\": 24022, # \"workspace_id\": 13740, # \"uuid\": \"69771c2e-b51e-4fe4-b721-01cd1950e68c\", # \"name\": \"q\", # \"creator\": \"122\", # \"modifier\": \"122\", # \"created_at\": \"2020-10-26T14:43:02+08:00\", # \"updated_at\": \"2020-10-26T14:43:02+08:00\", # \"color\": null, # \"text_color\": null, # \"icon\": null, # \"starred\": false # }], # \"owner_name\": \"122\", # \"owner_type\": \"Personal\" # }], # \"starred_dtable_list\": [] # } Base \u00b6 Add/copy/delete Base, interface to get access to Base add a base \u00b6 Add a base to a Workspace # workspace_id: Add it to your workspace by default if None # If workspace_id is specified, it will be added to this workspace account . add_base ( name , workspace_id = None ) Example account . add_base ( 'new-base' ) account . add_base ( 'new-base' , 35 ) copy a base \u00b6 Copy a base to a workspace # Copy the base named base_name from src_workspace to dst_workspace account . copy_base ( src_workspace_id , base_name , dst_workspace_id ) Example account . copy_base ( 35 , 'img-file' , 74 ) get a base \u00b6 Get a base object # Get the Base object named base_name that exists in the workspace whose id is workspace_id # Base object has been authorized, it is not necessary to call base.auth() # with_socket_io: False by default, whether to create a socket connection account . get_base ( workspace_id , base_name ) base = account . get_base ( 35 , 'img-file' )","title":"Account"},{"location":"python/account/#account","text":"Account provides an interface to list all Workspaces, add/copy/delete Bases, and obtain access rights to a Base.","title":"Account"},{"location":"python/account/#authorized-login","text":"Use email/password to log in, if you want to call other APIs provided by Account, you need to log in first","title":"Authorized login"},{"location":"python/account/#workspace","text":"A Workspace is a collection of user's Bases or a collection of group's Bases","title":"Workspace"},{"location":"python/account/#list-workspaces","text":"Get all your workspaces and its Bases account . list_workspaces ()","title":"list workspaces"},{"location":"python/account/#base","text":"Add/copy/delete Base, interface to get access to Base","title":"Base"},{"location":"python/account/#add-a-base","text":"Add a base to a Workspace # workspace_id: Add it to your workspace by default if None # If workspace_id is specified, it will be added to this workspace account . add_base ( name , workspace_id = None )","title":"add a base"},{"location":"python/account/#copy-a-base","text":"Copy a base to a workspace # Copy the base named base_name from src_workspace to dst_workspace account . copy_base ( src_workspace_id , base_name , dst_workspace_id )","title":"copy a base"},{"location":"python/account/#get-a-base","text":"Get a base object # Get the Base object named base_name that exists in the workspace whose id is workspace_id # Base object has been authorized, it is not necessary to call base.auth() # with_socket_io: False by default, whether to create a socket connection account . get_base ( workspace_id , base_name ) base = account . get_base ( 35 , 'img-file' )","title":"get a base"},{"location":"python/base/","text":"Base object \u00b6 Base represents a table. You can use two methods to obtain authorization to read and write a base. One way is to use the api token of the base, the token can be directly generated on the web side. Read directly from context.api_token in the cloud environment. Another method is to use the account name and password to initialize an Account object, and then call the Account interface to get a base object. The first method is more secure. Get authorization \u00b6 Use the API Token of the base to get access authorization. Example from seatable_api import Base , context server_url = context . server_url or 'https://cloud.seatable.cn' apt_token = context . api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d' base = Base ( api_token , server_url ) base . auth () Operation on Base \u00b6 The Base object provides interfaces for operating rows and columns, uploading and downloading files, etc. Please refer to the following documents Rows Links Columns Files","title":"Base object"},{"location":"python/base/#base-object","text":"Base represents a table. You can use two methods to obtain authorization to read and write a base. One way is to use the api token of the base, the token can be directly generated on the web side. Read directly from context.api_token in the cloud environment. Another method is to use the account name and password to initialize an Account object, and then call the Account interface to get a base object. The first method is more secure.","title":"Base object"},{"location":"python/base/#get-authorization","text":"Use the API Token of the base to get access authorization.","title":"Get authorization"},{"location":"python/base/#operation-on-base","text":"The Base object provides interfaces for operating rows and columns, uploading and downloading files, etc. Please refer to the following documents Rows Links Columns Files","title":"Operation on Base"},{"location":"python/columns/","text":"Column \u00b6 This document will show how the columns are operated by Base Object If you do not yet understand the Base object, please refer to this document Base list columns \u00b6 List all rows of the table/view base . list_columns ( table_name , view_name = None ) Example base . list_columns ( 'Table1' ) base . list_columns ( 'Table1' , view_name = 'default' ) insert column \u00b6 Insert/Append column base . insert_column ( table_name , column_name , column_type , column_key = None ) column_key is the key of the previous column at the position to be inserted, if omitted, it will be appended as the last column by default column_type please refer to constants Example from seatable_api.constants import ColumnTypes base . insert_column ( 'Table1' , 'python-api' , ColumnTypes . TEXT ) base . insert_column ( 'Table1' , 'python-api' , ColumnTypes . TEXT , column_key = ColumnTypes . TEXT ) rename column \u00b6 Rename the column base . rename_column ( table_name , column_key , new_column_name ) Example base . rename_column ( 'Table1' , 'kSiR' , 'new-python-api' ) resize column \u00b6 Set the column width base . resize_column ( table_name , column_key , new_column_width ) Example The default width of a column is 200, if you need to adjust the column width, such as 500 base . resize ( 'Table1' , 'asFV' , 500 ) freeze column \u00b6 Freeze the column base . freeze_column ( table_name , column_key , frozen ) frozon: True/False Example base . freeze_column ( 'Table1' , '0000' , True ) move column \u00b6 base . move_column ( table_name , column_key , target_column_key ) column_key is the key of the column you want to move target_column_key is the key of the anchor column, the moved column will be moved to the right of the column Example base . move_column ( 'Table1' , 'loPx' , '0000' ) In this example, the 'loPx' column will be moved to the right of the '0000' column modify column type \u00b6 Transform the column type base . modify_column_type ( table_name , column_key , new_column_type ) column_type please refer to constants Example from seatable_api.constants import ColumnTypes base . modify_column_type ( 'Table1' , 'nePI' , ColumnTypes . NUMBER ) delete column \u00b6 Delete the column base . delete_column ( table_name , column_key ) Example base . delete_column ( 'Table1' , 'bsKL' )","title":"Column"},{"location":"python/columns/#column","text":"This document will show how the columns are operated by Base Object If you do not yet understand the Base object, please refer to this document Base","title":"Column"},{"location":"python/columns/#list-columns","text":"List all rows of the table/view base . list_columns ( table_name , view_name = None )","title":"list columns"},{"location":"python/columns/#insert-column","text":"Insert/Append column base . insert_column ( table_name , column_name , column_type , column_key = None ) column_key is the key of the previous column at the position to be inserted, if omitted, it will be appended as the last column by default column_type please refer to constants","title":"insert column"},{"location":"python/columns/#rename-column","text":"Rename the column base . rename_column ( table_name , column_key , new_column_name )","title":"rename column"},{"location":"python/columns/#resize-column","text":"Set the column width base . resize_column ( table_name , column_key , new_column_width )","title":"resize column"},{"location":"python/columns/#freeze-column","text":"Freeze the column base . freeze_column ( table_name , column_key , frozen ) frozon: True/False","title":"freeze column"},{"location":"python/columns/#move-column","text":"base . move_column ( table_name , column_key , target_column_key ) column_key is the key of the column you want to move target_column_key is the key of the anchor column, the moved column will be moved to the right of the column","title":"move column"},{"location":"python/columns/#modify-column-type","text":"Transform the column type base . modify_column_type ( table_name , column_key , new_column_type ) column_type please refer to constants","title":"modify column type"},{"location":"python/columns/#delete-column","text":"Delete the column base . delete_column ( table_name , column_key )","title":"delete column"},{"location":"python/constants/","text":"Constants \u00b6 In the script there may be some constants we need to know ColumnTypes \u00b6 Column type, when insert/add columns, change column types, etc. need to be used from seatable_api import ColumnTypes ColumnTypes . NUMBER # number ColumnTypes . TEXT # text ColumnTypes . LONG_TEXT # long text ColumnTypes . CHECKBOX # checkbox ColumnTypes . DATE # date & time ColumnTypes . SINGLE_SELECT # single select ColumnTypes . MULTIPLE_SELECT # multiple select ColumnTypes . IMAGE # image ColumnTypes . FILE # file ColumnTypes . COLLABORATOR # collaborator ColumnTypes . LINK # link to other records ColumnTypes . FORMULA # formula ColumnTypes . CREATOR # creator ColumnTypes . CTIME # create time ColumnTypes . LAST_MODIFIER # last modifier ColumnTypes . MTIME # modify time ColumnTypes . GEOLOCATION # geolocation ColumnTypes . AUTO_NUMBER # auto munber ColumnTypes . URL # URL","title":"Constants"},{"location":"python/constants/#constants","text":"In the script there may be some constants we need to know","title":"Constants"},{"location":"python/constants/#columntypes","text":"Column type, when insert/add columns, change column types, etc. need to be used from seatable_api import ColumnTypes ColumnTypes . NUMBER # number ColumnTypes . TEXT # text ColumnTypes . LONG_TEXT # long text ColumnTypes . CHECKBOX # checkbox ColumnTypes . DATE # date & time ColumnTypes . SINGLE_SELECT # single select ColumnTypes . MULTIPLE_SELECT # multiple select ColumnTypes . IMAGE # image ColumnTypes . FILE # file ColumnTypes . COLLABORATOR # collaborator ColumnTypes . LINK # link to other records ColumnTypes . FORMULA # formula ColumnTypes . CREATOR # creator ColumnTypes . CTIME # create time ColumnTypes . LAST_MODIFIER # last modifier ColumnTypes . MTIME # modify time ColumnTypes . GEOLOCATION # geolocation ColumnTypes . AUTO_NUMBER # auto munber ColumnTypes . URL # URL","title":"ColumnTypes"},{"location":"python/context/","text":"Context \u00b6 When the script is running in the cloud, the context object provides a context environment. Here's how to use it from seatable_api import context context . server_url # Server URL, used to initialize Base context . api_token # API token for access a base context . current_table # The name of the table that the current user is viewing when the user runs a script manually context . current_row # When the user manually runs a script, the line where the cursor is currently located","title":"Context"},{"location":"python/context/#context","text":"When the script is running in the cloud, the context object provides a context environment. Here's how to use it from seatable_api import context context . server_url # Server URL, used to initialize Base context . api_token # API token for access a base context . current_table # The name of the table that the current user is viewing when the user runs a script manually context . current_row # When the user manually runs a script, the line where the cursor is currently located","title":"Context"},{"location":"python/files/","text":"Files \u00b6 This document will show you how to upload/download files through the Base object If you do not yet understand the Base object, please refer to this document Base get downlaod link by path \u00b6 Get the file download link # path: The relative path of the file in the Base base . get_file_download_link ( path ) Example # Suppose you get the url of a file from Base's data: # https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip # The way to get the download link is: download_link = base . get_file_download_link ( 'files/2020-10/aur7e-jqc19.zip' ) # If you want to download, use this link to download, in the example, using the requests library, which you can do with other libraries response = requests . get ( download_link ) get file upload link \u00b6 Get the upload link to upload the file, return a dictionary with the upload link in it When you upload, requires two parameters, parent_dir and relative_path, please see the example for details # return a dict # { # \"parent_path\": \"xxxxx\", # \"upload_link\": \"https://xxxxxx\" # } base . get_file_upload_link () Example upload_link_dict = base . get_file_upload_link () # Upload files, use the requests library, you can use other library operations parent_dir = upload_link_dict [ 'parent_path' ] upload_link = upload_link_dict [ 'upload_link' ] + '?ret-json=1' response = requests . post ( upload_link , data = { 'parent_dir' : parent_dir , 'relative_path' : relative_path , 'replace' : 1 if replace else 0 # Do you want to replace if the file with the same name has been uploaded }, files = { 'file' : ( name , open ( file_path , 'rb' )) # The file to be uploaded }) Pure API operation is very simple, but if it is a complete operation, such as: Intercept path, get download link, download, save Or Get upload link, read the file, set parameters, upload If the code is more rigorous, you must also check the status of each request in the middle, etc. Very cumbersome, so the following will show the upload/download file API after wrap the above process for your use download file \u00b6 Download the file # Save the file to the path save_path base . download_file ( file_url , save_path ) Example # Download the file to this file path base . download_file ( 'https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/screen%20(3).png' , 'files/screen.png' ) upload file in memory \u00b6 # name: File name after upload # content: File contents, is a bytes object # relative_path: Upload relative path, is the path of the Base's attachments # file_type: image or file, default is file # relative_path and file_type cannot be Note at the same time, if relative_path is None, the value is {file_type}s/{today-month}, like: files/2020-09 # replace: Whether to replace if there is a file with the same name in the directory # return: Return the info dict of the uploaded file # { # 'type': str, # 'size': int, # 'name': str, # 'url': str # } base . upload_bytes_file ( name , content : bytes , relative_path = None , file_type = None , replace = False ) Example reponse = requests . get ( 'http://xxxxxx.png' ) info_dict = base . upload_bytes_file ( 'file.png' , response . content , file_type = 'file' , replace = False ) with open ( 'file.png' , 'rb' ) as f : content = f . read () info_dict = base . upload_bytes_file ( 'file.png' , content , file_type = 'image' , replace = False ) # If you need to update row # Update the image column, assuming that the picture column named img, then: row [ 'img' ] . append ( info_dict . get ( 'url' )) base . update_row ( 'TableName' , row [ '_id' ], row ) # Update the file column, assuming that the file column named file, then: row [ 'file' ] . append ( info_dict ) base . update_row ( 'TableName' , row [ '_id' ], row ) # Of course, if there is no picture/file column in that row, then: row [ 'img' ] = [ info_dict . get ( 'url' )] # row['file'] = [info_dict] base . update_row ( 'TableName' , row [ '_id' ], row ) # If insert a new row row = { 'img' : [ info_dict . get ( 'url' )], 'file' : [ info_dict ] } base . append_row ( 'real-img-files' , row ) upload local file \u00b6 # file_path: The file path # name: File name after upload, if it is None, it is the name of the file # relative_path: Upload relative path, is the path of the Base's attachments # file_type: image or file\uff0cdefault is file # relative_path and file_type cannot be Note at the same time, if relative_path is None, the value is {file_type}s/{today-month}, like files/2020-09 # replace: Whether to replace if there is a file with the same name in the directory # return: Return the info dict of the uploaded file # { # 'type': str, # 'size': int, # 'name': str, # 'url': str # } base . upload_local_file ( file_path , name = None , relative_path = None , file_type = None , replace = False ) Example info_dict = base . upload_local_file ( 'files/file.png' , name = 'upload.png' , relative_path = None , file_type = 'image' , replace = True ) # If you need to update row, please refer to the example of upload file in memory","title":"Files"},{"location":"python/files/#files","text":"This document will show you how to upload/download files through the Base object If you do not yet understand the Base object, please refer to this document Base","title":"Files"},{"location":"python/files/#get-downlaod-link-by-path","text":"Get the file download link # path: The relative path of the file in the Base base . get_file_download_link ( path )","title":"get downlaod link by path"},{"location":"python/files/#get-file-upload-link","text":"Get the upload link to upload the file, return a dictionary with the upload link in it When you upload, requires two parameters, parent_dir and relative_path, please see the example for details # return a dict # { # \"parent_path\": \"xxxxx\", # \"upload_link\": \"https://xxxxxx\" # } base . get_file_upload_link ()","title":"get file upload link"},{"location":"python/files/#download-file","text":"Download the file # Save the file to the path save_path base . download_file ( file_url , save_path )","title":"download file"},{"location":"python/files/#upload-file-in-memory","text":"# name: File name after upload # content: File contents, is a bytes object # relative_path: Upload relative path, is the path of the Base's attachments # file_type: image or file, default is file # relative_path and file_type cannot be Note at the same time, if relative_path is None, the value is {file_type}s/{today-month}, like: files/2020-09 # replace: Whether to replace if there is a file with the same name in the directory # return: Return the info dict of the uploaded file # { # 'type': str, # 'size': int, # 'name': str, # 'url': str # } base . upload_bytes_file ( name , content : bytes , relative_path = None , file_type = None , replace = False )","title":"upload file in memory"},{"location":"python/files/#upload-local-file","text":"# file_path: The file path # name: File name after upload, if it is None, it is the name of the file # relative_path: Upload relative path, is the path of the Base's attachments # file_type: image or file\uff0cdefault is file # relative_path and file_type cannot be Note at the same time, if relative_path is None, the value is {file_type}s/{today-month}, like files/2020-09 # replace: Whether to replace if there is a file with the same name in the directory # return: Return the info dict of the uploaded file # { # 'type': str, # 'size': int, # 'name': str, # 'url': str # } base . upload_local_file ( file_path , name = None , relative_path = None , file_type = None , replace = False )","title":"upload local file"},{"location":"python/libs/","text":"List of libraries supported in the cloud environment \u00b6 In the cloud environment, Python scripts actually run in a Docker container environment. The container environment has some Python libraries installed by default, which can be imported in scripts. If you need to use other libraries, you need to contact us, or your script can only be run locally. Python 3 standard library \u00b6 The cloud environment now use Python 3.7, which supports importing modules in the Python standard library. Third party library \u00b6 The following modules are available SeaTable API, seatable-api Date/time calculation tool library, dateutils http request, requests","title":"List of libraries supported in the cloud environment"},{"location":"python/libs/#list-of-libraries-supported-in-the-cloud-environment","text":"In the cloud environment, Python scripts actually run in a Docker container environment. The container environment has some Python libraries installed by default, which can be imported in scripts. If you need to use other libraries, you need to contact us, or your script can only be run locally.","title":"List of libraries supported in the cloud environment"},{"location":"python/libs/#python-3-standard-library","text":"The cloud environment now use Python 3.7, which supports importing modules in the Python standard library.","title":"Python 3 standard library"},{"location":"python/libs/#third-party-library","text":"The following modules are available SeaTable API, seatable-api Date/time calculation tool library, dateutils http request, requests","title":"Third party library"},{"location":"python/links/","text":"Links \u00b6 This document will show how to manipulate links through the Base object If you do not yet understand the Base object, please refer to this document Base add link \u00b6 Add links, link other table records # link_id: link_id in the data attribute of the link column # table_name: The name of the link table # other_table_name: The name of the linked table # row_id: id of the link row # other_row_id: id of the linked row base . add_link ( link_id , table_name , other_table_name , row_id , other_row_id ) Example base . add_link ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' ) remove link \u00b6 Delete the link row # link_id: link_id in the data attribute of the link column # table_name: The name of the link table # other_table_name: The name of the linked table # row_id: id of the link row # other_row_id: id of the linked row base . remove_link ( link_id , table_name , other_table_name , row_id , other_row_id ) Example base . remove_link ( '5WeC' , 'real-img-files' , 'contact' , 'CGtoJB1oQM60RiKT-c5J-g' , 'PALm2wPKTCy-jdJNv_UWaQ' )","title":"Links"},{"location":"python/links/#links","text":"This document will show how to manipulate links through the Base object If you do not yet understand the Base object, please refer to this document Base","title":"Links"},{"location":"python/links/#add-link","text":"Add links, link other table records # link_id: link_id in the data attribute of the link column # table_name: The name of the link table # other_table_name: The name of the linked table # row_id: id of the link row # other_row_id: id of the linked row base . add_link ( link_id , table_name , other_table_name , row_id , other_row_id )","title":"add link"},{"location":"python/links/#remove-link","text":"Delete the link row # link_id: link_id in the data attribute of the link column # table_name: The name of the link table # other_table_name: The name of the linked table # row_id: id of the link row # other_row_id: id of the linked row base . remove_link ( link_id , table_name , other_table_name , row_id , other_row_id )","title":"remove link"},{"location":"python/rows/","text":"Row \u00b6 This document will show how to operate row through Base object If you do not yet understand the Base object, please refer to this document Base list rows \u00b6 Get all rows of the table base . list_rows ( table_name , view_name = None ) Example rows = base . list_rows ( 'Table1' ) rows = base . list_rows ( 'Table1' , view_name = 'default' ) append row \u00b6 Append a row base . append_row ( table_name , row_data ) Example row_data = { \"Name\" : \"I am new Row\" } base . append_row ( 'Table1' , row_data ) insert row \u00b6 Insert a row base . insert_row ( table_name , row_data , anchor_row_id ) # anchor_row_id is the id of the anchored row, the new row will be inserted below this row Example row_data = { \"Name\" : \"I am new Row\" } base . insert_row ( 'Table1' , row_data , 'U_eTV7mDSmSd-K2P535Wzw' ) batch append rows \u00b6 Batch append rows base . batch_append_rows ( table_name , rows_data ) Example rows_data = [{ 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }, { 'Name' : 'test batch' , 'content' : 'Yes' }] base . batch_append_rows ( 'Table6' , rows_data ) update row \u00b6 Update a row base . update_row ( table_name , row_id , row_data ) Example row_data = { \"dcXS\" : \"123\" } base . update_row ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' , row_data ) delete row \u00b6 Delete a row base . delete_row ( table_name , row_id ) Example base . delete_row ( 'Table1' , 'U_eTV7mDSmSd-K2P535Wzw' ) filter rows \u00b6 Filter rows base . filter_rows ( table_name , filters , view_name = None , filter_conjunction = 'And' ) Example filters = [{ \"column_key\" : \"0000\" , \"filter_predicate\" : \"contains\" , \"filter_term\" : \"a\" }], base . filter_rows ( 'Table1' , filters = filters )","title":"Row"},{"location":"python/rows/#row","text":"This document will show how to operate row through Base object If you do not yet understand the Base object, please refer to this document Base","title":"Row"},{"location":"python/rows/#list-rows","text":"Get all rows of the table base . list_rows ( table_name , view_name = None )","title":"list rows"},{"location":"python/rows/#append-row","text":"Append a row base . append_row ( table_name , row_data )","title":"append row"},{"location":"python/rows/#insert-row","text":"Insert a row base . insert_row ( table_name , row_data , anchor_row_id ) # anchor_row_id is the id of the anchored row, the new row will be inserted below this row","title":"insert row"},{"location":"python/rows/#batch-append-rows","text":"Batch append rows base . batch_append_rows ( table_name , rows_data )","title":"batch append rows"},{"location":"python/rows/#update-row","text":"Update a row base . update_row ( table_name , row_id , row_data )","title":"update row"},{"location":"python/rows/#delete-row","text":"Delete a row base . delete_row ( table_name , row_id )","title":"delete row"},{"location":"python/rows/#filter-rows","text":"Filter rows base . filter_rows ( table_name , filters , view_name = None , filter_conjunction = 'And' )","title":"filter rows"}]}